The way that my – operator overload functions is that it takes two custom lists and scans them both for matches. If there are matches, the matches will be removed.public static CustomList<T> operator -(CustomList<T> left, CustomList<T> right)The Parameters are two custom lists, and since the syntax of the signature is using the operator keyword, it knows that these two parameters will be found on either side of the operator symbol. Example: “left – right” will trigger this overload IF those things are CustomLists.      		  for(int i = 0; i < left.Count; i++)This is the first for loop that I use in the method. What it is doing is driving an iteration through the CustomList being patched in as the “left” parameter. This will be run once before hitting the next for loop and it will be returned to once the for loop below it is finished. Then it will increment i, thus causing the for loop to pass to the next index of the left CustomList.                           for(int x = 0; x < right.Count; x ++)                if (left[i].Equals(right[x]))                {                    left.Remove(left[i]);                }                else                {                    continue;                }This second for loop is hit and triggered immediately after the first for loop is started. What this for loop does is causes the iteration through the right CustomList to happen. In the same fashion as the first for loop, this will look at each value held in the index of the right CustomList. The code then hits an If/Else that checks whether the initial value at left[i] is the same as the value at right[x]. If the values are the same, it will remove that value from the left CustomList. If the values are not the same, then it will just continue through this second for loop and therefore continue iterating down indexes of the right CustomList. Once it checks whether the initial value at left[i] matches ANY of the values held in the right CustomList, it will break out of that for loop, but still get caught in the first for loop and continue through the left CustomList until all of its contents have been checked against the right CustomList.                        return left;It then returns the left CustomList without the items that found matches in the right CustomList.        